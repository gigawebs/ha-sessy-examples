mode: single
max_exceeded: silent
blueprint:
  name: Sessy X on the Meter
  description: Control a Sessy Battery according to a grid sensor
  author: PimDoos
  domain: automation
  input:
    grid_entity:
      name: Grid
      description: Entity measuring grid net consumption
      selector:
        entity:
          domain:
          - sensor
          device_class:
          - power
          multiple: false
    battery_device:
      name: Battery
      description: Sessy Battery devices to control
      selector:
        device:
          integration: sessy
          multiple: true
    offset_entity:
      name: Offset entities
      description: Entities whose value (in Watts) should be subtracted from the grid sensor. E.g. Car charger power sensor
      default: []
      selector:
        entity:
          multiple: true
          domain:
          - sensor
          - number
          - input_number
    battery_soc_min:
      name: Minimum State of Charge
      description: Batteries below this level will not participate in the load balancing pool
      default: 0
      selector:
        number:
          min: 0.0
          max: 99.0
          step: 1.0
          mode: slider
    battery_soc_max:
      name: Maximum State of Charge
      description: Batteries above this level will not participate in the load balancing pool
      default: 100
      selector:
        number:
          min: 1.0
          max: 100.0
          step: 1.0
          mode: slider
    priority_offset_template:
      name: Priority offset template
      description: Template defining a value to rotate battery priority by. Values higher than the number of batteries will loop back to 0.
      default: '{{ now().day }}'
      selector:
        template: {}
  source_url: https://github.com/gigawebs/ha-sessy-examples/blob/main/blueprints/automation/sessy/sessy-xom.yaml
variables:
  device_ids: !input battery_device
  optimal_max_power: "{{ states('input_number.setpoint_optimal_value') | float }}"
  grid_entity: !input grid_entity
  smoothing: "{{ states('input_number.setpoint_smoothing_value') | float }}"
  offset: "{{ states('input_number.setpoint_target_value') | float }}"
  offset_entity: !input offset_entity
  min_battery_level: !input battery_soc_min
  max_battery_level: !input battery_soc_max
  min_setpoint: "{{ states('input_number.setpoint_min') | float }}"
  max_setpoint: "{{ states('input_number.setpoint_max') | float }}"
trigger:
- platform: time_pattern
  minutes: /1
- platform: homeassistant
  event: start
action:
- variables:
    device_ids: '{% if device_ids is string %}{% set device_ids = [ device_ids ] %}{% endif %} {{ device_ids }}'
    battery_count: '{{ device_ids | count }}'
    battery_strategy_entity: '{% set entities = namespace(strategy=[]) %}{% for device_id in device_ids %}{% set entities.strategy = entities.strategy + [device_entities(device_id) | list | select("search","_power_strategy$") | list | join("")] %}{% endfor %}{{ entities.strategy }}'
    battery_setpoint_entity: '{% set entities = namespace(setpoint=[]) %}{% for device_id in device_ids %}{% set entities.setpoint = entities.setpoint + [device_entities(device_id) | list | select("search","_power_setpoint$") | list | join("")] %}{% endfor %}{{ entities.setpoint }}'
    battery_soc_entity: '{% set entities = namespace(soc=[]) %}{% for device_id in device_ids %}{% set entities.soc = entities.soc + [device_entities(device_id) | list | select("search","_state_of_charge$") | list | join("")] %}{% endfor %}{{ entities.soc }}'
    battery_state_entity: '{% set entities = namespace(state=[]) %}{% for device_id in device_ids %}{% set entities.state = entities.state + [device_entities(device_id) | list | select("search","_system_state$") | list | join("")] %}{% endfor %}{{ entities.state }}'
- repeat:
    while: []
    sequence:
    - variables:
        grid: "{% set multiplier = 0 %}  {% set grid_unit = state_attr(grid_entity, \"unit_of_measurement\") %} {% if grid_unit == \"W\" %}\n  {% set multiplier = 1 %}\n{% elif grid_unit == \"kW\" %}\n  {% set multiplier = 1000 %}\n{% endif %} {% set grid_power = states(grid_entity) | float %} {{ grid_power * multiplier }}\n"
        battery: '{{ battery_setpoint_entity | map("states") | list | map(''int'') | sum }}'
        offset: '{% if offset_entity is string %}{% set offset_entity = [offset_entity] %}{% endif %} {% set offset = offset + offset_entity | map("states") | map("int") | sum %} {{ offset }}'
        setpoint: '{% set load = battery + grid %} {% set setpoint_target = load - offset %} {% set setpoint_smooth = [[setpoint_target, battery - smoothing, min_setpoint] | max, battery + smoothing, max_setpoint] | min %} {{ setpoint_smooth }}'
        priority_offset_template: !input priority_offset_template
        priority_offset: '{{ priority_offset_template % battery_count }}'
        battery_setpoint_entity: '{{ battery_setpoint_entity[priority_offset:] + battery_setpoint_entity[:priority_offset] }}'
        battery_strategy_entity: '{{ battery_strategy_entity[priority_offset:] + battery_strategy_entity[:priority_offset] }}'
        battery_soc_entity: '{{ battery_soc_entity[priority_offset:] + battery_soc_entity[:priority_offset] }}'
        battery_state_entity: "{{ battery_state_entity[priority_offset:] + battery_state_entity[:priority_offset] }}  \n"
        battery_setpoints: "{% set num_optimal = ((setpoint | abs) / optimal_max_power) | round(0,'ceil') %}\n{% set batteries = namespace(entities=[], available=[], standby=[]) %}\n\n{% for i in range(0,battery_count) %}\n  {% if batteries.available | count < num_optimal \n  and states(battery_strategy_entity[i]) == \"api\" \n  and (states(battery_soc_entity[i]) | int >= min_battery_level or setpoint < 0)\n  and (states(battery_state_entity[i]) != \"battery_empty\" or setpoint < 0)\n  and (states(battery_soc_entity[i]) | int <= max_battery_level or setpoint > 0) \n  and (states(battery_state_entity[i]) != \"battery_full\" or setpoint > 0) %}\n    {% set batteries.available = batteries.available + [i] %}\n  {% else %}\n    {% set batteries.standby = batteries.standby + [i] %}\n  {% endif %}\n  \n{% endfor %}\n{% for i in batteries.available %}\n  {% set value = (setpoint / (batteries.available | count)) | int %}\n \ {% set value = [[value,-2200] | max, 2200] | min %}\n  {% set batteries.entities = batteries.entities + [{\"setpoint\":battery_setpoint_entity[i], \"strategy\": battery_strategy_entity[i], \"value\":value}] %}\n\n{% endfor %}\n{% for i in batteries.standby %}\n  {% set batteries.entities = batteries.entities + [{\"setpoint\":battery_setpoint_entity[i], \"strategy\": battery_strategy_entity[i], \"value\":0}] %}\n{% endfor %}\n{{ batteries.entities }}\n"
    - repeat:
        for_each: '{{ battery_setpoints }}'
        sequence:
        - if:
          - condition: template
            value_template: '{{ states(repeat.item.strategy) == "api" }}'
          then:
          - service: number.set_value
            continue_on_error: true
            target:
              entity_id: '{{ repeat.item.setpoint }}'
            data:
              value: '{{ repeat.item.value | int }}'
    - delay: !input update_interval
    - wait_for_trigger:
      - platform: state
        entity_id: !input grid_entity
      timeout: !input update_timeout
